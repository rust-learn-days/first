name: ðŸš€ Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

jobs:
  parse:
    runs-on: ubuntu-latest
    name: Parse ref
    outputs:
      version: ${{ steps.parse.outputs.version }}
    steps:
      - id: parse
        name: Parse ref
        run: echo "version=${GITHUB_REF##refs/tags/v}" >> ${GITHUB_OUTPUT}

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs:
        - parse
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1.3.7
        env:
          RUST_CACHE_KEY_OS: rust-cache-${{ matrix.target }}
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Install requirements
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Release build
        run: target=${{ matrix.target }} just build-release
      - name: Create output directory
        run: mkdir output
      - name: Create artifact
        run: tar -zcvf first-${{ matrix.target }}.tar.gz first README.md LICENSE
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: first-${{ matrix.target }}
          path: first-${{ needs.parse.outputs.version }}-${{ matrix.target }}.tar.gz

  release:
    name: Create Draft Release
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    needs:
      - parse
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Create artifacts directory
        run: mkdir -p artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create release draft
        shell: bash
        run: |
          set -x
          gh release create "${{ github.ref }}" --generate-notes --draft
          gh release upload "${{ github.ref }}" artifacts/*/*
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_NAME: "${{ needs.parse.outputs.version }} Release"
